### YamlMime:ManagedReference
items:
- uid: Bve5_Parsing.MapGrammar.VariableStore
  commentId: T:Bve5_Parsing.MapGrammar.VariableStore
  id: VariableStore
  parent: Bve5_Parsing.MapGrammar
  children:
  - Bve5_Parsing.MapGrammar.VariableStore.#ctor
  - Bve5_Parsing.MapGrammar.VariableStore.ClearVar
  - Bve5_Parsing.MapGrammar.VariableStore.GetVar(System.String)
  - Bve5_Parsing.MapGrammar.VariableStore.SetVar(System.String,System.Object)
  - Bve5_Parsing.MapGrammar.VariableStore.Vars
  langs:
  - csharp
  - vb
  name: VariableStore
  nameWithType: VariableStore
  fullName: Bve5_Parsing.MapGrammar.VariableStore
  type: Class
  source:
    remote:
      path: Bve5_Parsing/MapGrammar/VariableStore.cs
      branch: update_doc
      repo: https://github.com/aoisupersix/Bve5_Parsing
    id: VariableStore
    path: ../Bve5_Parsing/MapGrammar/VariableStore.cs
    startLine: 8
  assemblies:
  - Bve5_Parsing
  namespace: Bve5_Parsing.MapGrammar
  summary: "\n変数管理クラス\n"
  example: []
  syntax:
    content: public class VariableStore
    content.vb: Public Class VariableStore
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Bve5_Parsing.MapGrammar.VariableStore.Vars
  commentId: P:Bve5_Parsing.MapGrammar.VariableStore.Vars
  id: Vars
  parent: Bve5_Parsing.MapGrammar.VariableStore
  langs:
  - csharp
  - vb
  name: Vars
  nameWithType: VariableStore.Vars
  fullName: Bve5_Parsing.MapGrammar.VariableStore.Vars
  type: Property
  source:
    remote:
      path: Bve5_Parsing/MapGrammar/VariableStore.cs
      branch: update_doc
      repo: https://github.com/aoisupersix/Bve5_Parsing
    id: Vars
    path: ../Bve5_Parsing/MapGrammar/VariableStore.cs
    startLine: 12
  assemblies:
  - Bve5_Parsing
  namespace: Bve5_Parsing.MapGrammar
  syntax:
    content: public ReadOnlyDictionary<string, object> Vars { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.Object}
    content.vb: Public ReadOnly Property Vars As ReadOnlyDictionary(Of String, Object)
  overload: Bve5_Parsing.MapGrammar.VariableStore.Vars*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Bve5_Parsing.MapGrammar.VariableStore.#ctor
  commentId: M:Bve5_Parsing.MapGrammar.VariableStore.#ctor
  id: '#ctor'
  parent: Bve5_Parsing.MapGrammar.VariableStore
  langs:
  - csharp
  - vb
  name: VariableStore()
  nameWithType: VariableStore.VariableStore()
  fullName: Bve5_Parsing.MapGrammar.VariableStore.VariableStore()
  type: Constructor
  source:
    remote:
      path: Bve5_Parsing/MapGrammar/VariableStore.cs
      branch: update_doc
      repo: https://github.com/aoisupersix/Bve5_Parsing
    id: .ctor
    path: ../Bve5_Parsing/MapGrammar/VariableStore.cs
    startLine: 17
  assemblies:
  - Bve5_Parsing
  namespace: Bve5_Parsing.MapGrammar
  summary: "\n新しいインスタンスを生成します。\n"
  example: []
  syntax:
    content: public VariableStore()
    content.vb: Public Sub New
  overload: Bve5_Parsing.MapGrammar.VariableStore.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Bve5_Parsing.MapGrammar.VariableStore.SetVar(System.String,System.Object)
  commentId: M:Bve5_Parsing.MapGrammar.VariableStore.SetVar(System.String,System.Object)
  id: SetVar(System.String,System.Object)
  parent: Bve5_Parsing.MapGrammar.VariableStore
  langs:
  - csharp
  - vb
  name: SetVar(String, Object)
  nameWithType: VariableStore.SetVar(String, Object)
  fullName: Bve5_Parsing.MapGrammar.VariableStore.SetVar(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Bve5_Parsing/MapGrammar/VariableStore.cs
      branch: update_doc
      repo: https://github.com/aoisupersix/Bve5_Parsing
    id: SetVar
    path: ../Bve5_Parsing/MapGrammar/VariableStore.cs
    startLine: 28
  assemblies:
  - Bve5_Parsing
  namespace: Bve5_Parsing.MapGrammar
  summary: "\n変数を追加、もしくは上書きします。\n"
  example: []
  syntax:
    content: public void SetVar(string key, object val)
    parameters:
    - id: key
      type: System.String
      description: 変数名
    - id: val
      type: System.Object
      description: 変数の値
    content.vb: Public Sub SetVar(key As String, val As Object)
  overload: Bve5_Parsing.MapGrammar.VariableStore.SetVar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Bve5_Parsing.MapGrammar.VariableStore.GetVar(System.String)
  commentId: M:Bve5_Parsing.MapGrammar.VariableStore.GetVar(System.String)
  id: GetVar(System.String)
  parent: Bve5_Parsing.MapGrammar.VariableStore
  langs:
  - csharp
  - vb
  name: GetVar(String)
  nameWithType: VariableStore.GetVar(String)
  fullName: Bve5_Parsing.MapGrammar.VariableStore.GetVar(System.String)
  type: Method
  source:
    remote:
      path: Bve5_Parsing/MapGrammar/VariableStore.cs
      branch: update_doc
      repo: https://github.com/aoisupersix/Bve5_Parsing
    id: GetVar
    path: ../Bve5_Parsing/MapGrammar/VariableStore.cs
    startLine: 41
  assemblies:
  - Bve5_Parsing
  namespace: Bve5_Parsing.MapGrammar
  summary: "\n変数を取得します。\n"
  example: []
  syntax:
    content: public object GetVar(string key)
    parameters:
    - id: key
      type: System.String
      description: 変数名
    return:
      type: System.Object
      description: 変数の値
    content.vb: Public Function GetVar(key As String) As Object
  overload: Bve5_Parsing.MapGrammar.VariableStore.GetVar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Bve5_Parsing.MapGrammar.VariableStore.ClearVar
  commentId: M:Bve5_Parsing.MapGrammar.VariableStore.ClearVar
  id: ClearVar
  parent: Bve5_Parsing.MapGrammar.VariableStore
  langs:
  - csharp
  - vb
  name: ClearVar()
  nameWithType: VariableStore.ClearVar()
  fullName: Bve5_Parsing.MapGrammar.VariableStore.ClearVar()
  type: Method
  source:
    remote:
      path: Bve5_Parsing/MapGrammar/VariableStore.cs
      branch: update_doc
      repo: https://github.com/aoisupersix/Bve5_Parsing
    id: ClearVar
    path: ../Bve5_Parsing/MapGrammar/VariableStore.cs
    startLine: 53
  assemblies:
  - Bve5_Parsing
  namespace: Bve5_Parsing.MapGrammar
  summary: "\n変数をすべてクリアします。\n"
  example: []
  syntax:
    content: public void ClearVar()
    content.vb: Public Sub ClearVar
  overload: Bve5_Parsing.MapGrammar.VariableStore.ClearVar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Bve5_Parsing.MapGrammar
  commentId: N:Bve5_Parsing.MapGrammar
  name: Bve5_Parsing.MapGrammar
  nameWithType: Bve5_Parsing.MapGrammar
  fullName: Bve5_Parsing.MapGrammar
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Bve5_Parsing.MapGrammar.VariableStore.Vars*
  commentId: Overload:Bve5_Parsing.MapGrammar.VariableStore.Vars
  name: Vars
  nameWithType: VariableStore.Vars
  fullName: Bve5_Parsing.MapGrammar.VariableStore.Vars
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.Object}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.Object}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, Object>
  nameWithType: ReadOnlyDictionary<String, Object>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>
  nameWithType.vb: ReadOnlyDictionary(Of String, Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, System.Object)
  name.vb: ReadOnlyDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Bve5_Parsing.MapGrammar.VariableStore.#ctor*
  commentId: Overload:Bve5_Parsing.MapGrammar.VariableStore.#ctor
  name: VariableStore
  nameWithType: VariableStore.VariableStore
  fullName: Bve5_Parsing.MapGrammar.VariableStore.VariableStore
- uid: Bve5_Parsing.MapGrammar.VariableStore.SetVar*
  commentId: Overload:Bve5_Parsing.MapGrammar.VariableStore.SetVar
  name: SetVar
  nameWithType: VariableStore.SetVar
  fullName: Bve5_Parsing.MapGrammar.VariableStore.SetVar
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Bve5_Parsing.MapGrammar.VariableStore.GetVar*
  commentId: Overload:Bve5_Parsing.MapGrammar.VariableStore.GetVar
  name: GetVar
  nameWithType: VariableStore.GetVar
  fullName: Bve5_Parsing.MapGrammar.VariableStore.GetVar
- uid: Bve5_Parsing.MapGrammar.VariableStore.ClearVar*
  commentId: Overload:Bve5_Parsing.MapGrammar.VariableStore.ClearVar
  name: ClearVar
  nameWithType: VariableStore.ClearVar
  fullName: Bve5_Parsing.MapGrammar.VariableStore.ClearVar
